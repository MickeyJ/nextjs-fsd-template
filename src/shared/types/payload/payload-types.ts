/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
    members: MemberAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    events: Event;
    'event-registrations': EventRegistration;
    media: Media;
    members: Member;
    'membership-types': MembershipType;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    events: EventsSelect<false> | EventsSelect<true>;
    'event-registrations': EventRegistrationsSelect<false> | EventRegistrationsSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    members: MembersSelect<false> | MembersSelect<true>;
    'membership-types': MembershipTypesSelect<false> | MembershipTypesSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user:
    | (User & {
        collection: 'users';
      })
    | (Member & {
        collection: 'members';
      });
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
export interface MemberAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  firstName: string;
  lastName: string;
  /**
   * How the name appears publicly
   */
  displayName?: string | null;
  /**
   * Member bio for directory (max 500 characters)
   */
  bio?: string | null;
  /**
   * Profile picture
   */
  avatar?: (number | null) | Media;
  phone?: string | null;
  dateOfBirth?: string | null;
  /**
   * User role determines access levels
   */
  role: 'admin' | 'staff' | 'board' | 'member' | 'guest';
  /**
   * Additional permissions for staff/board members
   */
  permissions?:
    | ('manage_events' | 'manage_members' | 'view_reports' | 'send_emails' | 'manage_payments' | 'edit_website')[]
    | null;
  /**
   * Email verification timestamp
   */
  emailVerified?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  membership?: {
    /**
     * Current membership status
     */
    status?: ('active' | 'expired' | 'pending' | 'cancelled' | 'none') | null;
    type?: (number | null) | MembershipType;
    /**
     * Auto-generated member number
     */
    memberNumber?: string | null;
    joinDate?: string | null;
    /**
     * Next renewal date
     */
    renewalDate?: string | null;
    expirationDate?: string | null;
    /**
     * Automatically renew membership
     */
    autoRenew?: boolean | null;
    /**
     * Lifetime member
     */
    lifetime?: boolean | null;
  };
  billing?: {
    /**
     * Stripe customer ID
     */
    stripeCustomerId?: string | null;
    /**
     * Saved payment methods
     */
    paymentMethods?:
      | {
          id: string;
          type?: ('card' | 'bank') | null;
          last4?: string | null;
          isDefault?: boolean | null;
        }[]
      | null;
    /**
     * Total amount donated
     */
    totalDonated?: number | null;
    /**
     * Total amount paid (dues + events + donations)
     */
    totalPaid?: number | null;
  };
  preferences?: {
    newsletter?: boolean | null;
    eventNotifications?: boolean | null;
    renewalReminders?: boolean | null;
    showInDirectory?: boolean | null;
    shareContactInfo?: boolean | null;
  };
  interests?: ('networking' | 'education' | 'volunteering' | 'social' | 'professional' | 'mentorship')[] | null;
  lastLogin?: string | null;
  loginCount?: number | null;
  /**
   * Internal notes (not visible to member)
   */
  notes?: string | null;
  tags?: ('vip' | 'volunteer' | 'donor' | 'board_alumni' | 'founding')[] | null;
  status?: ('active' | 'inactive' | 'suspended' | 'banned') | null;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  /**
   * Description for accessibility
   */
  alt: string;
  /**
   * Optional caption to display with image
   */
  caption?: string | null;
  category?: ('general' | 'event' | 'member' | 'sponsor' | 'document') | null;
  /**
   * Photo credit or source
   */
  credit?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    card?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    square?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    hero?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "membership-types".
 */
export interface MembershipType {
  id: number;
  /**
   * e.g., Student, Individual, Corporate, Lifetime
   */
  name: string;
  /**
   * URL-friendly version of the name
   */
  slug: string;
  /**
   * Brief description of this membership type
   */
  description: string;
  /**
   * Price in dollars
   */
  price: number;
  /**
   * Stripe Price ID for this membership type
   */
  stripePriceId?: string | null;
  duration: 'monthly' | 'quarterly' | 'annual' | 'lifetime';
  /**
   * List of benefits for this membership type
   */
  benefits: {
    benefit: string;
    /**
     * Is this benefit included in this membership type?
     */
    included?: boolean | null;
    id?: string | null;
  }[];
  features?: {
    /**
     * Discount percentage for events (0-100)
     */
    eventDiscountPercentage?: number | null;
    /**
     * Maximum number of guests allowed at events
     */
    maxGuests?: number | null;
    /**
     * Can access the member directory
     */
    canAccessMemberDirectory?: boolean | null;
    /**
     * Can post job opportunities
     */
    canPostJobs?: boolean | null;
    /**
     * Can sponsor events
     */
    canSponsorEvents?: boolean | null;
    /**
     * Gets early access to event registration
     */
    priorityRegistration?: boolean | null;
  };
  eligibility?: {
    /**
     * Minimum age requirement
     */
    minAge?: number | null;
    /**
     * Maximum age limit (leave empty for no limit)
     */
    maxAge?: number | null;
    /**
     * Requires admin verification before activation
     */
    requiresVerification?: boolean | null;
    /**
     * Additional eligibility requirements or restrictions
     */
    requirements?: string | null;
  };
  /**
   * Order in which membership types appear (lower numbers first)
   */
  sortOrder?: number | null;
  /**
   * Is this membership type currently available for purchase?
   */
  isActive?: boolean | null;
  /**
   * Highlight this membership type as recommended
   */
  isFeatured?: boolean | null;
  /**
   * Maximum number of members allowed (leave empty for unlimited)
   */
  maxMembers?: number | null;
  /**
   * Days before expiration to send renewal reminder
   */
  renewalReminder?: number | null;
  /**
   * Badge color for this membership type (hex code)
   */
  color?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "events".
 */
export interface Event {
  id: number;
  title: string;
  /**
   * Auto-generated from title
   */
  slug?: string | null;
  /**
   * This will appear in event listings and previews
   */
  summary: string;
  description: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  location: {
    name: string;
    address: string;
    /**
     * Optional: For map display
     *
     * @minItems 2
     * @maxItems 2
     */
    coordinates?: [number, number] | null;
  };
  /**
   * Date of the event
   */
  event_date: string;
  /**
   * Event start time
   */
  start_time: string;
  /**
   * Event end time
   */
  end_time: string;
  /**
   * Timezone for the event
   */
  timezone?: ('America/Los_Angeles' | 'America/Denver' | 'America/Chicago' | 'America/New_York' | 'UTC') | null;
  /**
   * Event featured image
   */
  image?: (number | null) | Media;
  /**
   * Alternative: External image URL if not uploading
   */
  image_url?: string | null;
  /**
   * Select where this event should be published
   */
  platforms?: {
    wild_apricot?: boolean | null;
    meetup?: boolean | null;
    eventbrite?: boolean | null;
    /**
     * Wild Apricot event ID (auto-populated after sync)
     */
    wild_apricot_id?: string | null;
    /**
     * Meetup event ID (auto-populated after sync)
     */
    meetup_id?: string | null;
    /**
     * Eventbrite event ID (auto-populated after sync)
     */
    eventbrite_id?: string | null;
  };
  registration?: {
    enabled?: boolean | null;
    /**
     * Maximum number of attendees (0 for unlimited)
     */
    capacity?: number | null;
    /**
     * Event price in dollars (0 for free)
     */
    price?: number | null;
    /**
     * Last date/time to register
     */
    registration_deadline?: string | null;
  };
  status?: ('draft' | 'published' | 'cancelled' | 'completed') | null;
  /**
   * Event registrations
   */
  registrations?: (number | EventRegistration)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "event-registrations".
 */
export interface EventRegistration {
  id: number;
  /**
   * Auto-generated registration number
   */
  registrationNumber: string;
  /**
   * Event being registered for
   */
  event: number | Event;
  /**
   * Person registering for the event
   */
  user: number | User;
  /**
   * Registration status
   */
  status: 'pending' | 'confirmed' | 'waitlisted' | 'cancelled' | 'attended' | 'no-show';
  registrationType: 'member' | 'non-member' | 'student' | 'vip' | 'sponsor' | 'speaker';
  /**
   * Number of additional guests
   */
  numberOfGuests?: number | null;
  /**
   * Names of guests (if applicable)
   */
  guestNames?:
    | {
        name: string;
        email?: string | null;
        id?: string | null;
      }[]
    | null;
  payment: {
    /**
     * Total amount in dollars
     */
    amount: number;
    method?: ('free' | 'credit-card' | 'cash' | 'check' | 'comp') | null;
    /**
     * Stripe payment ID if paid online
     */
    stripePaymentId?: string | null;
    /**
     * When payment was received
     */
    paidAt?: string | null;
  };
  /**
   * Any dietary restrictions or allergies
   */
  dietaryRestrictions?: string | null;
  /**
   * Any special requests or accommodations needed
   */
  specialRequests?: string | null;
  checkIn?: {
    /**
     * Has attendee checked in at event?
     */
    checkedIn?: boolean | null;
    /**
     * Check-in timestamp
     */
    checkedInAt?: string | null;
    /**
     * Staff member who checked them in
     */
    checkedInBy?: (number | null) | User;
  };
  /**
   * Internal notes (not visible to attendee)
   */
  notes?: string | null;
  /**
   * Confirmation email sent to attendee
   */
  emailConfirmationSent?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "members".
 */
export interface Member {
  id: number;
  firstName: string;
  lastName: string;
  membershipStatus?: ('active' | 'inactive' | 'pending') | null;
  joinDate?: string | null;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'users';
        value: number | User;
      } | null)
    | ({
        relationTo: 'events';
        value: number | Event;
      } | null)
    | ({
        relationTo: 'event-registrations';
        value: number | EventRegistration;
      } | null)
    | ({
        relationTo: 'media';
        value: number | Media;
      } | null)
    | ({
        relationTo: 'members';
        value: number | Member;
      } | null)
    | ({
        relationTo: 'membership-types';
        value: number | MembershipType;
      } | null);
  globalSlug?: string | null;
  user:
    | {
        relationTo: 'users';
        value: number | User;
      }
    | {
        relationTo: 'members';
        value: number | Member;
      };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user:
    | {
        relationTo: 'users';
        value: number | User;
      }
    | {
        relationTo: 'members';
        value: number | Member;
      };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  firstName?: T;
  lastName?: T;
  displayName?: T;
  bio?: T;
  avatar?: T;
  phone?: T;
  dateOfBirth?: T;
  role?: T;
  permissions?: T;
  emailVerified?: T;
  loginAttempts?: T;
  lockUntil?: T;
  membership?:
    | T
    | {
        status?: T;
        type?: T;
        memberNumber?: T;
        joinDate?: T;
        renewalDate?: T;
        expirationDate?: T;
        autoRenew?: T;
        lifetime?: T;
      };
  billing?:
    | T
    | {
        stripeCustomerId?: T;
        paymentMethods?:
          | T
          | {
              id?: T;
              type?: T;
              last4?: T;
              isDefault?: T;
            };
        totalDonated?: T;
        totalPaid?: T;
      };
  preferences?:
    | T
    | {
        newsletter?: T;
        eventNotifications?: T;
        renewalReminders?: T;
        showInDirectory?: T;
        shareContactInfo?: T;
      };
  interests?: T;
  lastLogin?: T;
  loginCount?: T;
  notes?: T;
  tags?: T;
  status?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "events_select".
 */
export interface EventsSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  summary?: T;
  description?: T;
  location?:
    | T
    | {
        name?: T;
        address?: T;
        coordinates?: T;
      };
  event_date?: T;
  start_time?: T;
  end_time?: T;
  timezone?: T;
  image?: T;
  image_url?: T;
  platforms?:
    | T
    | {
        wild_apricot?: T;
        meetup?: T;
        eventbrite?: T;
        wild_apricot_id?: T;
        meetup_id?: T;
        eventbrite_id?: T;
      };
  registration?:
    | T
    | {
        enabled?: T;
        capacity?: T;
        price?: T;
        registration_deadline?: T;
      };
  status?: T;
  registrations?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "event-registrations_select".
 */
export interface EventRegistrationsSelect<T extends boolean = true> {
  registrationNumber?: T;
  event?: T;
  user?: T;
  status?: T;
  registrationType?: T;
  numberOfGuests?: T;
  guestNames?:
    | T
    | {
        name?: T;
        email?: T;
        id?: T;
      };
  payment?:
    | T
    | {
        amount?: T;
        method?: T;
        stripePaymentId?: T;
        paidAt?: T;
      };
  dietaryRestrictions?: T;
  specialRequests?: T;
  checkIn?:
    | T
    | {
        checkedIn?: T;
        checkedInAt?: T;
        checkedInBy?: T;
      };
  notes?: T;
  emailConfirmationSent?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  caption?: T;
  category?: T;
  credit?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        card?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        square?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        hero?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "members_select".
 */
export interface MembersSelect<T extends boolean = true> {
  firstName?: T;
  lastName?: T;
  membershipStatus?: T;
  joinDate?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "membership-types_select".
 */
export interface MembershipTypesSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  description?: T;
  price?: T;
  stripePriceId?: T;
  duration?: T;
  benefits?:
    | T
    | {
        benefit?: T;
        included?: T;
        id?: T;
      };
  features?:
    | T
    | {
        eventDiscountPercentage?: T;
        maxGuests?: T;
        canAccessMemberDirectory?: T;
        canPostJobs?: T;
        canSponsorEvents?: T;
        priorityRegistration?: T;
      };
  eligibility?:
    | T
    | {
        minAge?: T;
        maxAge?: T;
        requiresVerification?: T;
        requirements?: T;
      };
  sortOrder?: T;
  isActive?: T;
  isFeatured?: T;
  maxMembers?: T;
  renewalReminder?: T;
  color?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}